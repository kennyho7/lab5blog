{
  "version": 3,
  "sources": ["../../helpers/database.ts"],
  "sourcesContent": ["import { Sequelize, QueryTypes } from \"sequelize\";\nimport { Config } from \"../.config\";\n\nexport const run_query = async (query: string, values: any) => {\n  try {\n    const squelize = new\n      Sequelize(`postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`);\n    await sequelize.authenticate();\n    let data = await sequelize.query(query, {\n replacements: values,\n type: QueryTypes.SELECT\n });\n await sequelize.close();\n return data;\n } catch (err: any) {\n console.error(err, query, values);\n throw 'Database query error';\n }\n}\nexport const run_insert = async function run_insert(sql: string, values: any) {\n try {\n const sequelize = new Sequelize(`postgres://${ config.user}:${\nconfig.password}@${config.host}:${config.port}/${ config.database}`);\n await sequelize.authenticate();\n let data = await sequelize.query(sql, {\n replacements: values,\n type: QueryTypes.INSERT\n });\n await sequelize.close();\n return data;\n } catch (err: any) {\n console.error(err, query, values);\n throw 'Database query error';\n }\n}\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsC;AAG/B,MAAM,YAAY,OAAOA,QAAe,WAAgB;AAC7D,MAAI;AACF,UAAM,WAAW,IACf,2BAAU,cAAc,OAAO,QAAQ,OAAO,YAAY,OAAO,QAAQ,OAAO,QAAQ,OAAO,UAAU;AAC3G,UAAM,UAAU,aAAa;AAC7B,QAAI,OAAO,MAAM,UAAU,MAAMA,QAAO;AAAA,MAC3C,cAAc;AAAA,MACd,MAAM,4BAAW;AAAA,IACjB,CAAC;AACD,UAAM,UAAU,MAAM;AACtB,WAAO;AAAA,EACP,SAAS,KAAP;AACF,YAAQ,MAAM,KAAKA,QAAO,MAAM;AAChC,UAAM;AAAA,EACN;AACD;AACO,MAAM,aAAa,eAAeC,YAAW,KAAa,QAAa;AAC7E,MAAI;AACJ,UAAMC,aAAY,IAAI,2BAAU,cAAe,OAAO,QACvD,OAAO,YAAY,OAAO,QAAQ,OAAO,QAAS,OAAO,UAAU;AAClE,UAAMA,WAAU,aAAa;AAC7B,QAAI,OAAO,MAAMA,WAAU,MAAM,KAAK;AAAA,MACtC,cAAc;AAAA,MACd,MAAM,4BAAW;AAAA,IACjB,CAAC;AACD,UAAMA,WAAU,MAAM;AACtB,WAAO;AAAA,EACP,SAAS,KAAP;AACF,YAAQ,MAAM,KAAK,OAAO,MAAM;AAChC,UAAM;AAAA,EACN;AACD;",
  "names": ["query", "run_insert", "sequelize"]
}
